type Query {
    product(id: ID!): Product!
    products: [Product!]!
    productsMostViewed: [ProductViewCount!]!
    users: [User!]!
}

type Mutation {
    startViewing(productId: ID!, userId: ID, guestSessionId: String): Boolean
    stopViewing(productId: ID!, userId: ID, guestSessionId: String): Boolean
    updateProductViewSettings(productDisplaySettings: ProductDisplaySettingsInput!): Boolean

    createUser(username: String!, email: String!, password: String!): User!
    updateUser(id: ID!, username: String!, email: String!): User!
    deleteUser(id: ID!): Boolean
}

type User {
    id: ID!
    username: String!
    email: String!
}

type Product {
    id: ID!
    name: String!
    stock: Int!
    price: Float!
}

type ProductViewCount {
    product: Product
    viewCount: Int
}

input ProductDisplaySettingsInput {
    productId: ID!
    displayStockLevel: Boolean
    displayViews: Boolean
}

type ProductDisplaySettings {
    productId: ID!
    displayStockLevel: Boolean
    displayViews: Boolean
}

# TODO Remove
type ProductInteraction {
    id: ID!

    user: User!
    product: Product!

    timestamp: String!
    type: ProductInteractionType!
}

type Subscription {
    productViews(productId: ID): Int
    counter: Int
    productDisplaySettings(productId: ID!): ProductDisplaySettings
}

# TODO Remove
enum ProductInteractionType {
    VIEW_START, VIEW_END, ADD_TO_CART, REMOVE_FROM_CART
}

